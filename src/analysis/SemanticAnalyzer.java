package analysis;

import parser.SymbolTable;
import parser.TypeEnum;
import syntaxtree.*;

import java.util.ArrayList;

/**
 * This program takes in a ProgramNode and a symbol table and checks to
 * make sure the declarations and statements of a program are correct
 * according to the micro pascal grammar. It also checks to see if
 * variables have been declared before they are used, checks if the type
 * of a declared variable matches across assignment, and adds the type
 * of the declared variable to the syntax tree. The SemanticAnalyzer
 * checks every declaration and statement by finding all of the
 * ExpressionNodes and assigning a type to them and by finding all of the
 * ExpressionNodes within a StatementNode and assigning their type. The
 * type of each ExpressionNode is then added to the syntax tree
 * indentedToString. If a variable has been declared, code will be
 * generated by the code generator. If a variable hasn't been declared,
 * the boolean flag will be set as false and the code generator will
 * fail to generate code.
 *
 * @author Marissa Allen
 */
public class SemanticAnalyzer
{
    private boolean flag = true;
    private ProgramNode pn;
    private SymbolTable symbols;

    /**
     * A function that specifies if code will be generated by the code
     * generator or not.
     *
     * @return - returns a boolean to run the code generator.
     */
    public boolean goodToGo()
    {
        return flag;
    }

    /**
     * SemanticAnalyzer constructor that takes and stores values from a
     * ProgramNode and a SymbolTable to use throughout the program.
     *
     * @param program - A ProgramNode generated by a pascal program.
     * @param symbols - A SymbolTable generated by a pascal program.
     */
    public SemanticAnalyzer(ProgramNode program, SymbolTable symbols)
    {
        this.pn = program;
        this.symbols = symbols;
    }


    /**
     * A function that uses the ProgramNode and SymbolTable generated by
     * a pascal program to pass VariableNodes and CompoundStatementNodes
     * to other functions and assign a type to every ExpressionNode.
     */
    public void analyze()
    {
        DeclarationsNode dn = pn.getVariables();
        ArrayList<VariableNode> vn = dn.getVar();
        for(VariableNode s: vn)
        {
            assignExpressionType(s);
        }

        assignStatementTypes( pn.getMain());
    }


}